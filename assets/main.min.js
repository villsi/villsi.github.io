(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/animation/fish.js
  var require_fish = __commonJS({
    "ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/animation/fish.js"() {
      var RENDERER = {
        POINT_INTERVAL: 5,
        FISH_COUNT: 3,
        MAX_INTERVAL_COUNT: 50,
        INIT_HEIGHT_RATE: 0.4,
        THRESHOLD: 50,
        init: function() {
          this.setParameters();
          this.reconstructMethods();
          this.setup();
          this.bindEvent();
          this.render();
        },
        setParameters: function() {
          this.$window = $(window);
          this.$container = $("#jsi-flying-fish-container");
          this.$canvas = $("<canvas />");
          this.context = this.$canvas.appendTo(this.$container).get(0).getContext("2d");
          this.points = [];
          this.fishes = [];
          this.watchIds = [];
        },
        createSurfacePoints: function() {
          var count = Math.round(this.width / this.POINT_INTERVAL);
          this.pointInterval = this.width / (count - 1);
          this.points.push(new SURFACE_POINT(this, 0));
          for (var i = 1; i < count; i++) {
            var point = new SURFACE_POINT(this, i * this.pointInterval), previous = this.points[i - 1];
            point.setPreviousPoint(previous);
            previous.setNextPoint(point);
            this.points.push(point);
          }
        },
        reconstructMethods: function() {
          this.watchWindowSize = this.watchWindowSize.bind(this);
          this.jdugeToStopResize = this.jdugeToStopResize.bind(this);
          this.startEpicenter = this.startEpicenter.bind(this);
          this.moveEpicenter = this.moveEpicenter.bind(this);
          this.reverseVertical = this.reverseVertical.bind(this);
          this.render = this.render.bind(this);
        },
        setup: function() {
          this.points.length = 0;
          this.fishes.length = 0;
          this.watchIds.length = 0;
          this.intervalCount = this.MAX_INTERVAL_COUNT;
          this.width = this.$container.width();
          this.height = this.$container.height();
          this.fishCount = this.FISH_COUNT * this.width / 500 * this.height / 500;
          this.$canvas.attr({ width: this.width, height: this.height });
          this.reverse = false;
          this.fishes.push(new FISH(this));
          this.createSurfacePoints();
        },
        watchWindowSize: function() {
          this.clearTimer();
          this.tmpWidth = this.$window.width();
          this.tmpHeight = this.$window.height();
          this.watchIds.push(setTimeout(this.jdugeToStopResize, this.WATCH_INTERVAL));
        },
        clearTimer: function() {
          while (this.watchIds.length > 0) {
            clearTimeout(this.watchIds.pop());
          }
        },
        jdugeToStopResize: function() {
          var width = this.$window.width(), height = this.$window.height(), stopped = width == this.tmpWidth && height == this.tmpHeight;
          this.tmpWidth = width;
          this.tmpHeight = height;
          if (stopped) {
            this.setup();
          }
        },
        bindEvent: function() {
          this.$window.on("resize", this.watchWindowSize);
          this.$container.on("mouseenter", this.startEpicenter);
          this.$container.on("mousemove", this.moveEpicenter);
        },
        getAxis: function(event) {
          var offset = this.$container.offset();
          return {
            x: event.clientX - offset.left + this.$window.scrollLeft(),
            y: event.clientY - offset.top + this.$window.scrollTop()
          };
        },
        startEpicenter: function(event) {
          this.axis = this.getAxis(event);
        },
        moveEpicenter: function(event) {
          var axis = this.getAxis(event);
          if (!this.axis) {
            this.axis = axis;
          }
          this.generateEpicenter(axis.x, axis.y, axis.y - this.axis.y);
          this.axis = axis;
        },
        generateEpicenter: function(x, y, velocity) {
          if (y < this.height / 2 - this.THRESHOLD || y > this.height / 2 + this.THRESHOLD) {
            return;
          }
          var index = Math.round(x / this.pointInterval);
          if (index < 0 || index >= this.points.length) {
            return;
          }
          this.points[index].interfere(y, velocity);
        },
        reverseVertical: function() {
          this.reverse = !this.reverse;
          for (var i = 0, count = this.fishes.length; i < count; i++) {
            this.fishes[i].reverseVertical();
          }
        },
        controlStatus: function() {
          for (var i = 0, count = this.points.length; i < count; i++) {
            this.points[i].updateSelf();
          }
          for (var i = 0, count = this.points.length; i < count; i++) {
            this.points[i].updateNeighbors();
          }
          if (this.fishes.length < this.fishCount) {
            if (--this.intervalCount == 0) {
              this.intervalCount = this.MAX_INTERVAL_COUNT;
              this.fishes.push(new FISH(this));
            }
          }
        },
        render: function() {
          requestAnimationFrame(this.render);
          this.controlStatus();
          this.context.clearRect(0, 0, this.width, this.height);
          this.context.fillStyle = "hsl(200, 100%, 50%)";
          for (var i = 0, count = this.fishes.length; i < count; i++) {
            this.fishes[i].render(this.context);
          }
          this.context.save();
          this.context.globalCompositeOperation = "xor";
          this.context.beginPath();
          this.context.moveTo(0, this.reverse ? 0 : this.height);
          for (var i = 0, count = this.points.length; i < count; i++) {
            this.points[i].render(this.context);
          }
          this.context.lineTo(this.width, this.reverse ? 0 : this.height);
          this.context.closePath();
          this.context.fill();
          this.context.restore();
        }
      };
      var SURFACE_POINT = function(renderer, x) {
        this.renderer = renderer;
        this.x = x;
        this.init();
      };
      SURFACE_POINT.prototype = {
        SPRING_CONSTANT: 0.03,
        SPRING_FRICTION: 0.9,
        WAVE_SPREAD: 0.3,
        ACCELARATION_RATE: 0.01,
        init: function() {
          this.initHeight = this.renderer.height * this.renderer.INIT_HEIGHT_RATE;
          this.height = this.initHeight;
          this.fy = 0;
          this.force = { previous: 0, next: 0 };
        },
        setPreviousPoint: function(previous) {
          this.previous = previous;
        },
        setNextPoint: function(next) {
          this.next = next;
        },
        interfere: function(y, velocity) {
          this.fy = this.renderer.height * this.ACCELARATION_RATE * (this.renderer.height - this.height - y >= 0 ? -1 : 1) * Math.abs(velocity);
        },
        updateSelf: function() {
          this.fy += this.SPRING_CONSTANT * (this.initHeight - this.height);
          this.fy *= this.SPRING_FRICTION;
          this.height += this.fy;
        },
        updateNeighbors: function() {
          if (this.previous) {
            this.force.previous = this.WAVE_SPREAD * (this.height - this.previous.height);
          }
          if (this.next) {
            this.force.next = this.WAVE_SPREAD * (this.height - this.next.height);
          }
        },
        render: function(context) {
          if (this.previous) {
            this.previous.height += this.force.previous;
            this.previous.fy += this.force.previous;
          }
          if (this.next) {
            this.next.height += this.force.next;
            this.next.fy += this.force.next;
          }
          context.lineTo(this.x, this.renderer.height - this.height);
        }
      };
      var FISH = function(renderer) {
        this.renderer = renderer;
        this.init();
      };
      FISH.prototype = {
        GRAVITY: 0.4,
        init: function() {
          this.direction = Math.random() < 0.5;
          this.x = this.direction ? this.renderer.width + this.renderer.THRESHOLD : -this.renderer.THRESHOLD;
          this.previousY = this.y;
          this.vx = this.getRandomValue(4, 10) * (this.direction ? -1 : 1);
          if (this.renderer.reverse) {
            this.y = this.getRandomValue(this.renderer.height * 1 / 10, this.renderer.height * 4 / 10);
            this.vy = this.getRandomValue(2, 5);
            this.ay = this.getRandomValue(0.05, 0.2);
          } else {
            this.y = this.getRandomValue(this.renderer.height * 6 / 10, this.renderer.height * 9 / 10);
            this.vy = this.getRandomValue(-5, -2);
            this.ay = this.getRandomValue(-0.2, -0.05);
          }
          this.isOut = false;
          this.theta = 0;
          this.phi = 0;
        },
        getRandomValue: function(min, max) {
          return min + (max - min) * Math.random();
        },
        reverseVertical: function() {
          this.isOut = !this.isOut;
          this.ay *= -1;
        },
        controlStatus: function(context) {
          this.previousY = this.y;
          this.x += this.vx;
          this.y += this.vy;
          this.vy += this.ay;
          if (this.renderer.reverse) {
            if (this.y > this.renderer.height * this.renderer.INIT_HEIGHT_RATE) {
              this.vy -= this.GRAVITY;
              this.isOut = true;
            } else {
              if (this.isOut) {
                this.ay = this.getRandomValue(0.05, 0.2);
              }
              this.isOut = false;
            }
          } else {
            if (this.y < this.renderer.height * this.renderer.INIT_HEIGHT_RATE) {
              this.vy += this.GRAVITY;
              this.isOut = true;
            } else {
              if (this.isOut) {
                this.ay = this.getRandomValue(-0.2, -0.05);
              }
              this.isOut = false;
            }
          }
          if (!this.isOut) {
            this.theta += Math.PI / 20;
            this.theta %= Math.PI * 2;
            this.phi += Math.PI / 30;
            this.phi %= Math.PI * 2;
          }
          this.renderer.generateEpicenter(this.x + (this.direction ? -1 : 1) * this.renderer.THRESHOLD, this.y, this.y - this.previousY);
          if (this.vx > 0 && this.x > this.renderer.width + this.renderer.THRESHOLD || this.vx < 0 && this.x < -this.renderer.THRESHOLD) {
            this.init();
          }
        },
        render: function(context) {
          context.save();
          context.translate(this.x, this.y);
          context.rotate(Math.PI + Math.atan2(this.vy, this.vx));
          context.scale(1, this.direction ? 1 : -1);
          context.beginPath();
          context.moveTo(-30, 0);
          context.bezierCurveTo(-20, 15, 15, 10, 40, 0);
          context.bezierCurveTo(15, -10, -20, -15, -30, 0);
          context.fill();
          context.save();
          context.translate(40, 0);
          context.scale(0.9 + 0.2 * Math.sin(this.theta), 1);
          context.beginPath();
          context.moveTo(0, 0);
          context.quadraticCurveTo(5, 10, 20, 8);
          context.quadraticCurveTo(12, 5, 10, 0);
          context.quadraticCurveTo(12, -5, 20, -8);
          context.quadraticCurveTo(5, -10, 0, 0);
          context.fill();
          context.restore();
          context.save();
          context.translate(-3, 0);
          context.rotate((Math.PI / 3 + Math.PI / 10 * Math.sin(this.phi)) * (this.renderer.reverse ? -1 : 1));
          context.beginPath();
          if (this.renderer.reverse) {
            context.moveTo(5, 0);
            context.bezierCurveTo(10, 10, 10, 30, 0, 40);
            context.bezierCurveTo(-12, 25, -8, 10, 0, 0);
          } else {
            context.moveTo(-5, 0);
            context.bezierCurveTo(-10, -10, -10, -30, 0, -40);
            context.bezierCurveTo(12, -25, 8, -10, 0, 0);
          }
          context.closePath();
          context.fill();
          context.restore();
          context.restore();
          this.controlStatus(context);
        }
      };
      $(function() {
        RENDERER.init();
      });
    }
  });

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/plugins/loggers.js
  function logInfo(...args) {
    console.info("%c[dsr-blog]", "color: #8aa2d3", ...args);
  }

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/plugins/utils.js
  var SECTIONS = {
    INDEX: "index",
    LIST: "list",
    SINGLE: "single",
    CODE: "code",
    TAGS: "tags",
    FRIENDS: "friends"
  };
  function getSection() {
    const section = document.body.getAttribute("data-section") || "";
    if (Object.values(SECTIONS).includes(section)) {
      return section;
    } else {
      return "";
    }
  }

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/components/search.js
  var SEARCH_URL = "https://www.google.com/search";
  var SEARCH_SITE = "blog.villsi.net/post";
  function handleSearch(str) {
    if (!str || typeof str !== "string") {
      logInfo("no search query set");
      return;
    }
    const url = new URL(SEARCH_URL);
    url.searchParams.append("q", str);
    url.searchParams.append("newwindow", "1");
    url.searchParams.append("as_sitesearch", SEARCH_SITE);
    logInfo(`perform search with ${str.split(" ").length} querys`);
    window.open(url.toString());
  }
  var search_default = () => {
    const ctrl = document.querySelector("#search-btn");
    const input = document.querySelector("#search-input");
    if (ctrl && input) {
      ctrl.addEventListener("click", () => handleSearch(input.value));
    }
  };

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/components/toc.js
  var toc_default = () => {
    const tocCtrl = document.querySelector(`#toc-btn`);
    const tocContent = document.querySelector(`#toc-overlay`);
    if (!tocContent && tocCtrl) {
      tocCtrl.remove();
      return;
    }
    if (!tocCtrl) {
      return;
    }
    tocCtrl.addEventListener("click", () => {
      if (Array.from(tocContent.classList).includes("toc--active")) {
        tocContent.classList.remove("toc--active");
      } else {
        tocContent.classList.add("toc--active");
      }
    });
  };

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/components/twemoji.js
  var twemoji_default = () => {
    const content = document.querySelector("div.content");
    if (content && window.twemoji) {
      window.twemoji.parse(content, {
        base: "https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/",
        folder: "svg",
        ext: ".svg"
      });
    }
  };

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/components/zoom.js
  var zoom_default = () => {
    if (document.querySelector("[data-zoomable]") && window.mediumZoom) {
      window.mediumZoom("[data-zoomable]", {
        background: "var(--color-backdrop)"
      });
    }
  };

  // ns-hugo:/home/runner/work/hugo-server/hugo-server/assets/js/components/quicklink.js
  var quicklink_default = () => {
    if (window.quicklink) {
      window.quicklink.listen();
    }
  };

  // <stdin>
  var import_fish = __toESM(require_fish());
  var SECTION = getSection();
  twemoji_default();
  logInfo("twemoji module inited");
  if ([SECTIONS.INDEX, SECTIONS.LIST].includes(SECTION)) {
    search_default();
    logInfo("search module inited");
  }
  if (SECTION === SECTIONS.SINGLE) {
    toc_default();
    logInfo("toc module inited");
    zoom_default();
    logInfo("zoom module inited");
  }
  quicklink_default();
  logInfo("quicklink module inited");
})();
